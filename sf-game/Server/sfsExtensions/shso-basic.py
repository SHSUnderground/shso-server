# shso basic
#
# import mysql.connector
import time
import sys


def init():
	global db 
	global cmdMap
	
	cmdMap = {"ping": handlePing, "keepAlive": handleKeepAlive }
	
	db = _server.getDatabaseManager()



def destroy():
	_server.trace( "Python extension dying" )


def escapeQuotes(string):
	string2 = str(string).replace( '"', '\"')
	string2 = string2.replace( "'", "\'")
	string2 = string2.replace("\\", "\\\\")
	return string2


def handleRequest(cmd, params, who, roomId, protocol):
	#if protocol == "xml":
	if cmdMap.has_key(cmd):
		cmdMap[cmd](params, who, roomId)
		

def handleInternalEvent(evt):
	chan = evt.getObject("chan")
	# nick = "chumbawumbA"
	nick = evt.getParam("nick")

	# nick = nick[17:] # remove version info from nick before continuing...
	importantInfo = nick.split(',')	
	if len(importantInfo) > 1:
		nick = importantInfo[0]
	passw = evt.getParam("pass")

	# Get the secret key of this channel
	key = _server.getSecretKey(chan)
	_server.trace("key = " + key)
	_server.trace("Nick = " + (nick))

	#_server.trace("evt = " + ' '.join(map(str, dir(evt))) )
	evtName = evt.getEventName()
	_server.trace( "Received internal event: " + evt.getEventName() )
	if evtName == "loginRequest":
		error = ""
		valid = 0
		response = {}
		user = None
		session_token = None
		userIP = chan.socket().getInetAddress().getHostAddress()
		queryRes = None
		checkSQL = "SELECT * FROM user WHERE username = '" + escapeQuotes(nick) + "' AND MD5(CONCAT(" + key + ", Password)) = '" + escapeQuotes(passw) + "';"
		UserCheckQueryResult = db.executeQuery(checkSQL)
		if (UserCheckQueryResult) and (UserCheckQueryResult.size() > 0):
				queryRes = UserCheckQueryResult
				row = queryRes.get(0)
				username = row.getItem("Username")
				playerID = row.getItem("ID")
				paid = row.getItem("Paid")
				dbpass = row.getItem("Password")
				# session_token = generate_token()
				gentoken = "SELECT UUID() AS token;"
				tokenQuery = db.executeQuery(gentoken)
				if (tokenQuery.size() > 0):
					for row in tokenQuery:
						session_token = str(row.getItem("token"))
				# _server.trace('TOKEN GENERATED SUCCESSFULLY.')
				sql = "INSERT INTO tokens VALUES(" + escapeQuotes(str(playerID)) + ", '" + escapeQuotes(session_token) + "') ON DUPLICATE KEY UPDATE token='" + escapeQuotes(session_token) + "'"
				success = db.executeCommand(sql)
				if not success:
					error = "Record insertion failed."
				else:
					response["_cmd"] = "logOK"
					obj = _server.loginUser(nick, dbpass, chan)
							#if obj.success == true:
					_server.trace("Calling getUserByChannel()!")
					user = _server.getUserByChannel(chan)
					response["name"] = username
					# the ID returned HAS to be the userId generated by smartfox.
					response["id"] = str(user.getUserId())
					response["playerId"] = playerID
					session_token_sql = "select * from shso.tokens where UserID =" + (playerID)
					session_token_res = db.executeQuery(session_token_sql)
					session_token = None
					if session_token_res:
						session_token = session_token_res[0].getItem("token")
					response["sessionToken"] = session_token
					# login OK, so set user variables
					_server.setUserVariables(user, {'Ready': 'False'}, True)
					_server.trace("userName= " + user.getName())
					_server.trace("userPlayerIndex= " + str(user.getPlayerIndex()))
					_server.trace("userID= " + str(user.getUserId()))
					_server.trace("userVariable= " + str(user.getVariable('Ready')))
			

			#Remove any previous active_potions
			#sql = "DELETE FROM active_potion_effects WHERE userid=" + str(playerID)
			#db.executeCommand(sql)


		else:
			response["_cmd"] = "logKO"
			response["err"] = error
			response["status"] = 403
			_server.trace("Invalid credentials")

		_server.trace("Calling sendResponse()!")
		_server.sendResponse(response, -1, None, chan)


		######### send playerVars msg back for this user. needs more work, for now just username is needed. #####
		#users = _server.getCurrentZone().getUserList(); 
		#usersArray = []
		#_server.trace("About to print user list...")
		#for u in users:
		#	print u.getName()
		#	usersArray.append(u)
		#_server.trace("Done printing user list.")
	

		## need to send this response to all players	
		#response = []
		#response.append("playerVars")
		#response.append(str(user.getUserId()) + "|" + playerID + "|" + username + "|true|1|1")	
		#_server.sendResponse(response, -1, None, usersArray, _server.PROTOCOL_STR)
		###############################################################



		response = {}
		if error == "":
			#_server.trace("Calling sendRoomList()!")
			_server.sendRoomList(user)
			_server.trace("Called sendRoomList()!")
			zone = _server.getCurrentZone()
			room = zone.getRoomByName("lobby")	
			_server.joinRoom(user,-1,True,room.getId(),"",False,True)
			response["_cmd"] = "notification_ready"
		else: 
			response["_cmd"] = "logKO"
		_server.sendResponse(response, -1, None, [user])


def handlePing(params, who, roomId):
	#_server.trace("params[0]=" + params[0])
	cliTime = params[0]         # in milisec
	srvTime = str(int(round(time.time() ))) # in sec....convert to millisec at client
	_server.trace("srvTime=" + srvTime)
	#response = "ping%-%" + cliTime + "%" + srvTime
	#response = {}
	#response["_cmd"] = "ping"
	#response["val1"] = "-"
	#response["val2"] = cliTime
	#response["val3"] = srvTime
	
	response = []
	response.append("ping")
	response.append(cliTime)	
	response.append(srvTime)
	
	#response.append("ping")
	#response.append({"val":cliTime}) 
	#response.append({"val":srvTime})

	_server.sendResponse(response, -1, None, [who], _server.PROTOCOL_STR)

	
def handleKeepAlive(params, who, roomId):
	response = {}
	response["_cmd"] = "keepAlive"

	_server.sendResponse(response, -1, None, [who])
